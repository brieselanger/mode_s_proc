}
#+++Hauptroutine DF20/21-Dekodierung+++
df2021decode <- function(data){
#Status-Bits fuer BDS 5,0 (im message-Teil Bits 1, 12, 24, 35 und 46)
bds5.bits <- paste0(substr(data$bin,33,33),substr(data$bin,44,44),substr(data$bin,56,56),substr(data$bin,67,67),substr(data$bin,78,78))
bds5.rows <- which(bds5.bits == "11111")
data[bds5.rows,] <- bds5(data[bds5.rows,])
#Status-Bits fuer BDS 6,0 (im message-Teil Bits 1, 13 und 24... Bit 35 und 46 (vertical speed) DISABLED)
bds6.bits <- paste0(substr(data$bin,33,33),substr(data$bin,45,45),substr(data$bin,56,56)),substr(data$bin,67,67),substr(data$bin,78,78))
bds6.rows <- which(bds6.bits == "11111")
data[bds6.rows,] <- bds6(data[bds6.rows,])
return(data)
}
#Dekodierungsroutinen für DF20/21 bzw. BDS-Register 5,0 und 6,0
#Alexander Buetow
#28.10.14
#+++Funktionen+++
#Routine fuer BDS-Register 5,0
bds5 <- function(data.selected){
#dekodiere roll angle
lwd <- as.integer(substr(data.selected$bin,34,34)) #left wing down sign bit (1=true/left wing down), 0=false/not/right wing down)
data.selected$rola <- (strtoi(substr(data.selected$bin,35,43),base=2)*(45/256)*(1-2*lwd)+(lwd*90))*(1-2*lwd)
#dekodiere true track angle
ws <- as.integer(substr(data.selected$bin,45,45)) #west sign bit (1=true/west, 0=false/east)
data.selected$trk <- strtoi(substr(data.selected$bin,46,55),base=2)*(90/512)+ws*180 #true track
data.selected$gs <- strtoi(substr(data.selected$bin,57,66),base=2)*(1024/512)   #dekodiere ground speed
data.selected$tas <- strtoi(substr(data.selected$bin,79,88),base=2)*2   #dekodiere true air speed
#filtern
data.selected$gs[which(data.selected$gs > 550)] <- NA
data.selected$gs[which(data.selected$gs < 120)] <- NA
data.selected$tas[which(data.selected$tas > 500)] <- NA
data.selected$tas[which(data.selected$tas < 120)] <- NA
if(max(abs(data.selected$gs-data.selected$tas), na.rm=TRUE) > 200){
data.selected[which(abs(data.selected$gs-data.selected$tas) > 200),c("gs","tas")] <- NA
}
data.selected$rola[which(abs(data.selected$rola) > 30)] <- NA
data.selected[which(is.na(data.selected$rola) | is.na(data.selected$trk) | is.na(data.selected$gs)
| is.na(data.selected$tas)),c("rola","trk","gs","tas")] <- NA
return(data.selected)
}
#Routine fuer BDS-Register 6,0
bds6 <- function(data.selected){
#dekodiere magnetic heading
ws <- as.integer(substr(data.selected$bin,34,34)) #west sign bit (1=true/west, 0=false/east)
data.selected$hdg <- strtoi(substr(data.selected$bin,35,44),base=2)*(90/512)+180*ws #magnetic heading
data.selected$kias <- strtoi(substr(data.selected$bin,46,55),base=2)   #dekodiere indicated airspeed
data.selected$mach <- strtoi(substr(data.selected$bin,57,66),base=2)*0.004   #dekodiere mach
#inertial vertical rate +++DISABLED+++
#signbit <- as.integer(substr(data.selected$bin,79,79))
#data.selected$vs <- (strtoi(substr(data.selected$bin,80,88),base=2)*32*(1-2*signbit)+(signbit*16384))*(1-2*signbit)
#filtern
data.selected$kias[which(data.selected$kias > 380)] <- NA
data.selected$kias[which(data.selected$kias < 120)] <- NA
#data.selected$vs[which(abs(data.selected$vs) > 5000)] <- NA
data.selected$mach[which((data.selected$mach > 0.9) | (data.selected$mach < 0.2))] <- NA
data.selected[which(is.na(data.selected$hdg) | is.na(data.selected$kias) | is.na(data.selected$mach))
,c("hdg","kias","mach")] <- NA
return(data.selected)
}
#+++Hauptroutine DF20/21-Dekodierung+++
df2021decode <- function(data){
#Status-Bits fuer BDS 5,0 (im message-Teil Bits 1, 12, 24, 35 und 46)
bds5.bits <- paste0(substr(data$bin,33,33),substr(data$bin,44,44),substr(data$bin,56,56),substr(data$bin,67,67),substr(data$bin,78,78))
bds5.rows <- which(bds5.bits == "11111")
data[bds5.rows,] <- bds5(data[bds5.rows,])
#Status-Bits fuer BDS 6,0 (im message-Teil Bits 1, 13 und 24... Bit 35 und 46 (vertical speed) DISABLED)
bds6.bits <- paste0(substr(data$bin,33,33),substr(data$bin,45,45),substr(data$bin,56,56),substr(data$bin,67,67),substr(data$bin,78,78))
bds6.rows <- which(bds6.bits == "11111")
data[bds6.rows,] <- bds6(data[bds6.rows,])
return(data)
}
#ADS-B-Daten einlesen
#Alexander Buetow
#30.10.14
#Quellen: "Technical Provisions for Mode S Services and Extended Squitter" (ICAO, 2011)
#         http://www.lll.lu/~edward/edward/adsb/DecodingADSBposition.html (Stand: August 2014)
rm(list=ls())
#file1 <- './testdata2_big.dat' #Inputformat: [unixtime] [complete ES message, 28hex]
file1 <- './20141031_1530-1730.dat'
#-----Funktionen------
source('df17decode.R') #Dekodierungsalgorithmus fuer DF17-Bloecke
source('df2021decode.R') #Dekodierungsalgorithmus fuer DF20/21-Bloecke, BDS 4,0 und 5,0
source('icao_recon.R') #CRC-Routine zur Rekonstruktion der interogierten ICAO-Adressen in DF20/21-Meldungen
#Funktion zur Umwandlung der hex-Strings in Binary-Strings (sehr schnell)
hextobin <- function(hexdata){
k <- nrow(hexdata)
bindata <- rep(NA,k)
liste <- cbind(c("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"),
c("0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"))
for (i in 1:28){ #ueber jeden einzelen hex-Character der 112bit-Messages
hex <- substr(as.character(hexdata[,2]),i,i)
for (j in 1:16){ #fuer alle hex-Werte
line <- which(hex == liste[j,1])
bindata[line] <- paste0(bindata[line],liste[j,2])
}
}
bindata <- substr(bindata,3,114)
return(bindata)
}
#---------------------
decl <- 3.3 #magnetische Deklination (Stand+Quelle: Oktober 2014, http://www.gfz-potsdam.de/deklinationsrechner/)
raw.dat <- read.table(file1, colClasses=c("numeric", "character"))
raw.dat[,2] <- substr(raw.dat[,2],2,29)
raw.bin <- hextobin(raw.dat) #wandle Hex- in Binary-Strings um
#Datenbloecke splitten
raw <- data.frame(cbind(raw.dat[,1], substr(raw.dat[,2], 1, 2), substr(raw.dat[,2], 3, 8),
substr(raw.dat[,2], 9, 22), substr(raw.dat[,2], 23, 28), raw.bin), NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
names(raw) <- c("time", "format", "address", "mess", "parity", "bin", "format2", "type", "alt", "alt.geo", "hdiff",
"vs", "flag", "lat.dec", "lon.dec", "lat", "lon", "hdg", "trk", "rola", "tas", "kias", "gs", "mach")
#entferne unnoetige Meldungen
raw <- raw[-c(which(raw$format %in% "80"),which(raw$mess %in% "00000000000000")),]
#+++Auswertung der DF17-Bloecke+++
selrows <- which(raw$format %in% c("8D","8F")) #selektiere DF17-Messages
raw[selrows,] <- df17decode(raw[selrows,])
#+++Auswertung der DF20/21-Bloecke+++
#dekodiere BDS-Register 5,0 und 6,0
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages
raw[selrows,] <- df2021decode(raw[selrows,])
#loesche nicht dekodierbare DF20/21-Bloecke: wenn keine exemplarische Variable aus den BDS-Registern dekodiert werden konnte
raw <- raw[which(xor(is.na(raw$rola),is.na(raw$kias)) | raw$format %in% c("8D","8F")),]
#rekonstruiere ICAO-Adressen der verbliebenen DF20/21-Messages (recht langsam!)
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages erneut
raw$address <- strtoi(as.character(raw$address), base=16) #wandle hex-ICAO-Adresse in dezimal um
raw$address[selrows] <- icao_recon(raw$bin[selrows],raw$parity[selrows])
#Aufraeumen und Vorbereitung zur meteo. Auswertung: unnoetige Datenfelder loeschen, Formatfeld formatieren, hdg-Wert umd Deklination korrigieren
raw <- raw[,-which(names(raw) %in% c("mess","type","flag","lat.dec","lon.dec","parity","bin"))] #loesche nicht mehr benoetigte Felder
raw <- raw[-which(raw$format %in% c("8D","8F") & is.na(raw$lat) & is.na(raw$hdiff)),] #loesche DF17-Felder, die keine dekodierte Position beinhalten
raw$format <- raw$format2
raw <- raw[,-4]
raw$format[which(is.na(raw$format) & !is.na(raw$mach))] <- 6 #BDS 6,0
raw$format[which(is.na(raw$format))] <- 5 #BDS 5,0
raw$format[which(!is.na(raw$hdiff))] <- 179 #DF17, BDS 0,9
raw$format[which(raw$format == 17)] <- 175 #DF17, BDS 0,5
raw$time <- as.integer(as.character(raw$time))
#Deklinationskorrektur
raw$hdg <- raw$hdg+decl
raw$hdg[which(raw$hdg > 360)] <- raw$hdg[which(raw$hdg > 360)]-360
raw$hdg[which(raw$hdg < 0)] <- raw$hdg[which(raw$hdg < 0)]+360
raw2 <- raw
#+++meteorologische Auswertung+++
source('meteocalc.R') #Berechnungsroutine fuer meteorologische Auswertung
raw <- meteocalc(raw)
tempinpol <- function(data){
height.max <- round(max(data$alt)/1000)*1000
height.diff <- 600 #Interpolationshoehenstufen
inpol <- cbind(seq(0,height.max,height.diff),NA,NA)  #allokiere Dummy-Matrix fuer interpolierte
for(i in 0:nrow(inpol)){
h1 <- inpol[i,1]-height.diff/2 #untere Grenze
h2 <- inpol[i,1]+height.diff/2 #obere Grenze
h1h2rows <- which(data$alt < h2 & data$alt >= h1)
inpol[i,2] <- mean(data$temp[h1h2rows])
inpol[i,3] <- sd(data$temp[h1h2rows])
}
return(inpol)
}
raw.pol <- tempinpol(raw)
#plotten vertikaler T-Verteilung + SD
dev.off()
plot(raw$temp,raw$alt, pch=20, cex=0.5, col='#FF555566',
main='Verteilung der Temperatur und Standardabweichung, 31. Okt 2014, 1530-1730z',
xlab='Temperatur in °C', ylab='Druckhöhe in ft', axes=F, xlim=c(-70,45))
lines(raw.pol[which(!is.na(raw.pol[,3])),2],raw.pol[which(!is.na(raw.pol[,3])),1], pch=20)
axis(1, seq(-70,20,10))
axis(2, seq(0,40000,5000))
box()
par(fig=c(0.7,1,0,1), new=TRUE)
plot(raw.pol[which(!is.na(raw.pol[,3])),3],raw.pol[which(!is.na(raw.pol[,3])),1],
type='l', ylab='', xlab='SD in K', yaxt='n')
#horizontale Verteilung der Datenpunkte
dev.off()
plot(raw$lon,raw$lat, pch=19, cex=0.3, main='Horizontale Verteilung der Datenpunkte, 31. Okt 2014, 1530-1730z',
ylab="Breitengrad in deg", xlab="Längengrad in deg",asp=1)
points(13.287711,52.559686, col='red',pch=3,)
text(13.387711,52.499686,labels='EDDT',col='red', cex=0.5)
points(13.52,52.388333, col='red',pch=3)
text(13.62,52.338333,labels='EDDB',col='red', cex=0.5)
#vertikale und zonale Verteilung der Datenpunkte
dev.off()
plot(raw$lon,raw$alt, pch=19, cex=0.3, main='Zonale vs. vertikale Verteilung der Datenpunkte, 31. Okt 2014, 1530-1730z',
ylab="Druckhöhe in ft", xlab="Längengrad in deg")
points(13.287711,0, col='red',pch=3,)
text(13.087711,0,labels='EDDT',col='red', cex=0.5)
points(13.52,0, col='red',pch=3)
text(13.62,0,labels='EDDB',col='red', cex=0.5)
#plotten vertikaler T-Verteilung + SD
dev.off()
plot(raw$temp,raw$alt, pch=20, cex=0.5, col='#FF555566',
main='Verteilung der Temperatur und Standardabweichung, 31. Okt 2014, 1530-1730z',
xlab='Temperatur in °C', ylab='Druckhöhe in ft', axes=F, xlim=c(-70,45))
lines(raw.pol[which(!is.na(raw.pol[,3])),2],raw.pol[which(!is.na(raw.pol[,3])),1], pch=20)
axis(1, seq(-70,20,10))
axis(2, seq(0,40000,5000))
box()
par(fig=c(0.7,1,0,1), new=TRUE)
plot(raw.pol[which(!is.na(raw.pol[,3])),3],raw.pol[which(!is.na(raw.pol[,3])),1],
type='l', ylab='', xlab='SD in K', yaxt='n')
#horizontale Verteilung der Datenpunkte
dev.off()
plot(raw$lon,raw$lat, pch=19, cex=0.3, main='Horizontale Verteilung der Datenpunkte, 31. Okt 2014, 1530-1730z',
ylab="Breitengrad in deg", xlab="Längengrad in deg",asp=1)
points(13.287711,52.559686, col='red',pch=3,)
text(13.387711,52.499686,labels='EDDT',col='red', cex=0.5)
points(13.52,52.388333, col='red',pch=3)
text(13.62,52.338333,labels='EDDB',col='red', cex=0.5)
#vertikale und zonale Verteilung der Datenpunkte
dev.off()
plot(raw$lon,raw$alt, pch=19, cex=0.3, main='Zonale vs. vertikale Verteilung der Datenpunkte, 31. Okt 2014, 1530-1730z',
ylab="Druckhöhe in ft", xlab="Längengrad in deg")
points(13.287711,0, col='red',pch=3,)
text(13.087711,0,labels='EDDT',col='red', cex=0.5)
points(13.52,0, col='red',pch=3)
text(13.62,0,labels='EDDB',col='red', cex=0.5)
plot(raw$wspd,raw$alt)
plot(raw$wspd,raw$alt, cex=0.5,pch=20)
plot(raw$wdeg,raw$alt, cex=0.5,pch=20)
plot(raw$wspd,raw$alt, cex=0.5,pch=20)
dim(raw)
#ADS-B-Daten einlesen
#Alexander Buetow
#05.12.14
#Quellen: "Technical Provisions for Mode S Services and Extended Squitter" (ICAO, 2011)
#         http://www.lll.lu/~edward/edward/adsb/DecodingADSBposition.html (Stand: August 2014)
rm(list=ls())
#file1 <- './testdata2_big.dat' #Inputformat: [unixtime] [complete ES message, 28hex]
#file1 <- './20141031_1530-1730.dat'
datestr <- format(Sys.time()-3600, '%Y%m%d_%H', 'GMT')
file1 <- paste0('~/adsb/raw/',datestr,'.dat') #Inputfile
#-----Funktionen------
source('df17decode.R') #Dekodierungsalgorithmus fuer DF17-Bloecke
source('df2021decode.R') #Dekodierungsalgorithmus fuer DF20/21-Bloecke, BDS 4,0 und 5,0
source('icao_recon.R') #CRC-Routine zur Rekonstruktion der interogierten ICAO-Adressen in DF20/21-Meldungen
#Funktion zur Umwandlung der hex-Strings in Binary-Strings (sehr schnell)
hextobin <- function(hexdata){
k <- nrow(hexdata)
bindata <- rep(NA,k)
liste <- cbind(c("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"),
c("0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"))
for (i in 1:28){ #ueber jeden einzelen hex-Character der 112bit-Messages
hex <- substr(as.character(hexdata[,2]),i,i)
for (j in 1:16){ #fuer alle hex-Werte
line <- which(hex == liste[j,1])
bindata[line] <- paste0(bindata[line],liste[j,2])
}
}
bindata <- substr(bindata,3,114)
return(bindata)
}
#---------------------
decl <- 3.3 #magnetische Deklination (Stand+Quelle: Oktober 2014, http://www.gfz-potsdam.de/deklinationsrechner/)
raw.dat <- read.table(file1, colClasses=c("numeric", "character"))
raw.dat[,2] <- substr(raw.dat[,2],2,29)
raw.bin <- hextobin(raw.dat) #wandle Hex- in Binary-Strings um
#ADS-B-Daten einlesen
#Alexander Buetow
#05.12.14
#Quellen: "Technical Provisions for Mode S Services and Extended Squitter" (ICAO, 2011)
#         http://www.lll.lu/~edward/edward/adsb/DecodingADSBposition.html (Stand: August 2014)
rm(list=ls())
setwd('~/adsb/R')
#file1 <- './testdata2_big.dat' #Inputformat: [unixtime] [complete ES message, 28hex]
#file1 <- './20141031_1530-1730.dat'
datestr <- format(Sys.time()-3600, '%Y%m%d_%H', 'GMT')
file1 <- paste0('~/adsb/raw/',datestr,'.dat') #Inputfile
#-----Funktionen------
source('df17decode.R') #Dekodierungsalgorithmus fuer DF17-Bloecke
source('df2021decode.R') #Dekodierungsalgorithmus fuer DF20/21-Bloecke, BDS 4,0 und 5,0
source('icao_recon.R') #CRC-Routine zur Rekonstruktion der interogierten ICAO-Adressen in DF20/21-Meldungen
#Funktion zur Umwandlung der hex-Strings in Binary-Strings (sehr schnell)
hextobin <- function(hexdata){
k <- nrow(hexdata)
bindata <- rep(NA,k)
liste <- cbind(c("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"),
c("0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"))
for (i in 1:28){ #ueber jeden einzelen hex-Character der 112bit-Messages
hex <- substr(as.character(hexdata[,2]),i,i)
for (j in 1:16){ #fuer alle hex-Werte
line <- which(hex == liste[j,1])
bindata[line] <- paste0(bindata[line],liste[j,2])
}
}
bindata <- substr(bindata,3,114)
return(bindata)
}
#---------------------
decl <- 3.3 #magnetische Deklination (Stand+Quelle: Oktober 2014, http://www.gfz-potsdam.de/deklinationsrechner/)
raw.dat <- read.table(file1, colClasses=c("numeric", "character"))
raw.dat[,2] <- substr(raw.dat[,2],2,29)
raw.bin <- hextobin(raw.dat) #wandle Hex- in Binary-Strings um
#Datenbloecke splitten
raw <- data.frame(cbind(raw.dat[,1], substr(raw.dat[,2], 1, 2), substr(raw.dat[,2], 3, 8),
substr(raw.dat[,2], 9, 22), substr(raw.dat[,2], 23, 28), raw.bin), NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
names(raw) <- c("time", "format", "address", "mess", "parity", "bin", "format2", "type", "alt", "alt.geo", "hdiff",
"vs", "flag", "lat.dec", "lon.dec", "lat", "lon", "hdg", "trk", "rola", "tas", "kias", "gs", "mach")
#entferne unnoetige Meldungen
raw <- raw[-c(which(raw$format %in% "80"),which(raw$mess %in% "00000000000000")),]
#+++Auswertung der DF17-Bloecke+++
selrows <- which(raw$format %in% c("8D","8F")) #selektiere DF17-Messages
raw[selrows,] <- df17decode(raw[selrows,])
#+++Auswertung der DF20/21-Bloecke+++
#dekodiere BDS-Register 5,0 und 6,0
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages
raw[selrows,] <- df2021decode(raw[selrows,])
#loesche nicht dekodierbare DF20/21-Bloecke: wenn keine exemplarische Variable aus den BDS-Registern dekodiert werden konnte
raw <- raw[which(xor(is.na(raw$rola),is.na(raw$kias)) | raw$format %in% c("8D","8F")),]
#rekonstruiere ICAO-Adressen der verbliebenen DF20/21-Messages (recht langsam!)
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages erneut
raw$address <- strtoi(as.character(raw$address), base=16) #wandle hex-ICAO-Adresse in dezimal um
raw$address[selrows] <- icao_recon(raw$bin[selrows],raw$parity[selrows])
#Aufraeumen und Vorbereitung zur meteo. Auswertung: unnoetige Datenfelder loeschen, Formatfeld formatieren, hdg-Wert umd Deklination korrigieren
raw <- raw[,-which(names(raw) %in% c("mess","type","flag","lat.dec","lon.dec","parity","bin"))] #loesche nicht mehr benoetigte Felder
raw <- raw[-which(raw$format %in% c("8D","8F") & is.na(raw$lat) & is.na(raw$hdiff)),] #loesche DF17-Felder, die keine dekodierte Position beinhalten
raw$format <- raw$format2
raw <- raw[,-4]
raw$format[which(is.na(raw$format) & !is.na(raw$mach))] <- 6 #BDS 6,0
raw$format[which(is.na(raw$format))] <- 5 #BDS 5,0
raw$format[which(!is.na(raw$hdiff))] <- 179 #DF17, BDS 0,9
raw$format[which(raw$format == 17)] <- 175 #DF17, BDS 0,5
raw$time <- as.integer(as.character(raw$time))
#Deklinationskorrektur
raw$hdg <- raw$hdg+decl
raw$hdg[which(raw$hdg > 360)] <- raw$hdg[which(raw$hdg > 360)]-360
raw$hdg[which(raw$hdg < 0)] <- raw$hdg[which(raw$hdg < 0)]+360
#+++meteorologische Auswertung+++
source('meteocalc.R') #Berechnungsroutine fuer meteorologische Auswertung
raw <- meteocalc(raw)
#+++Speichern+++
write.table(raw, row.names=FALSE, file=paste0('~/adsb/data/modes_ber_', datestr, '.dat'))
#Interpolationsfunktion fuer Temperatur
tempinpol <- function(data){
height.max <- round(max(data$alt)/1000)*1000
height.diff <- 600 #Interpolationshoehenstufen
inpol <- cbind(seq(0,height.max,height.diff),NA,NA)  #allokiere Dummy-Matrix fuer interpolierte
for(i in 0:nrow(inpol)){
h1 <- inpol[i,1]-height.diff/2 #untere Grenze
h2 <- inpol[i,1]+height.diff/2 #obere Grenze
h1h2rows <- which(data$alt < h2 & data$alt >= h1)
inpol[i,2] <- mean(data$temp[h1h2rows])
inpol[i,3] <- sd(data$temp[h1h2rows])
}
return(inpol)
}
raw.pol <- tempinpol(raw)
#ADS-B-Daten einlesen
#Alexander Buetow
#05.12.14
#Quellen: "Technical Provisions for Mode S Services and Extended Squitter" (ICAO, 2011)
#         http://www.lll.lu/~edward/edward/adsb/DecodingADSBposition.html (Stand: August 2014)
rm(list=ls())
setwd('~/adsb/R')
#file1 <- './testdata2_big.dat' #Inputformat: [unixtime] [complete ES message, 28hex]
#file1 <- './20141031_1530-1730.dat'
datestr <- format(Sys.time()-3600, '%Y%m%d_%H', 'GMT')
file1 <- paste0('~/adsb/raw/',datestr,'.dat') #Inputfile
#-----Funktionen------
source('df17decode.R') #Dekodierungsalgorithmus fuer DF17-Bloecke
source('df2021decode.R') #Dekodierungsalgorithmus fuer DF20/21-Bloecke, BDS 4,0 und 5,0
source('icao_recon.R') #CRC-Routine zur Rekonstruktion der interogierten ICAO-Adressen in DF20/21-Meldungen
#Funktion zur Umwandlung der hex-Strings in Binary-Strings (sehr schnell)
hextobin <- function(hexdata){
k <- nrow(hexdata)
bindata <- rep(NA,k)
liste <- cbind(c("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"),
c("0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"))
for (i in 1:28){ #ueber jeden einzelen hex-Character der 112bit-Messages
hex <- substr(as.character(hexdata[,2]),i,i)
for (j in 1:16){ #fuer alle hex-Werte
line <- which(hex == liste[j,1])
bindata[line] <- paste0(bindata[line],liste[j,2])
}
}
bindata <- substr(bindata,3,114)
return(bindata)
}
#---------------------
decl <- 3.3 #magnetische Deklination (Stand+Quelle: Oktober 2014, http://www.gfz-potsdam.de/deklinationsrechner/)
raw.dat <- read.table(file1, colClasses=c("numeric", "character"))
raw.dat[,2] <- substr(raw.dat[,2],2,29)
raw.bin <- hextobin(raw.dat) #wandle Hex- in Binary-Strings um
#Datenbloecke splitten
raw <- data.frame(cbind(raw.dat[,1], substr(raw.dat[,2], 1, 2), substr(raw.dat[,2], 3, 8),
substr(raw.dat[,2], 9, 22), substr(raw.dat[,2], 23, 28), raw.bin), NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
names(raw) <- c("time", "format", "address", "mess", "parity", "bin", "format2", "type", "alt", "alt.geo", "hdiff",
"vs", "flag", "lat.dec", "lon.dec", "lat", "lon", "hdg", "trk", "rola", "tas", "kias", "gs", "mach")
#entferne unnoetige Meldungen
raw <- raw[-c(which(raw$format %in% "80"),which(raw$mess %in% "00000000000000")),]
#+++Auswertung der DF17-Bloecke+++
selrows <- which(raw$format %in% c("8D","8F")) #selektiere DF17-Messages
raw[selrows,] <- df17decode(raw[selrows,])
#+++Auswertung der DF20/21-Bloecke+++
#dekodiere BDS-Register 5,0 und 6,0
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages
raw[selrows,] <- df2021decode(raw[selrows,])
#loesche nicht dekodierbare DF20/21-Bloecke: wenn keine exemplarische Variable aus den BDS-Registern dekodiert werden konnte
raw <- raw[which(xor(is.na(raw$rola),is.na(raw$kias)) | raw$format %in% c("8D","8F")),]
#rekonstruiere ICAO-Adressen der verbliebenen DF20/21-Messages (recht langsam!)
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages erneut
raw$address <- strtoi(as.character(raw$address), base=16) #wandle hex-ICAO-Adresse in dezimal um
raw$address[selrows] <- icao_recon(raw$bin[selrows],raw$parity[selrows])
#Aufraeumen und Vorbereitung zur meteo. Auswertung: unnoetige Datenfelder loeschen, Formatfeld formatieren, hdg-Wert umd Deklination korrigieren
raw <- raw[,-which(names(raw) %in% c("mess","type","flag","lat.dec","lon.dec","parity","bin"))] #loesche nicht mehr benoetigte Felder
raw <- raw[-which(raw$format %in% c("8D","8F") & is.na(raw$lat) & is.na(raw$hdiff)),] #loesche DF17-Felder, die keine dekodierte Position beinhalten
raw$format <- raw$format2
raw <- raw[,-4]
raw$format[which(is.na(raw$format) & !is.na(raw$mach))] <- 6 #BDS 6,0
raw$format[which(is.na(raw$format))] <- 5 #BDS 5,0
raw$format[which(!is.na(raw$hdiff))] <- 179 #DF17, BDS 0,9
raw$format[which(raw$format == 17)] <- 175 #DF17, BDS 0,5
raw$time <- as.integer(as.character(raw$time))
#Deklinationskorrektur
raw$hdg <- raw$hdg+decl
raw$hdg[which(raw$hdg > 360)] <- raw$hdg[which(raw$hdg > 360)]-360
raw$hdg[which(raw$hdg < 0)] <- raw$hdg[which(raw$hdg < 0)]+360
#+++meteorologische Auswertung+++
source('meteocalc.R') #Berechnungsroutine fuer meteorologische Auswertung
raw <- meteocalc(raw)
#+++Speichern+++
write.table(raw, row.names=FALSE, file=paste0('~/adsb/data/modes_ber_', datestr, '.dat'))
#Interpolationsfunktion fuer Temperatur
#tempinpol <- function(data){
#  height.max <- round(max(data$alt)/1000)*1000
#  height.diff <- 600 #Interpolationshoehenstufen
#  inpol <- cbind(seq(0,height.max,height.diff),NA,NA)  #allokiere Dummy-Matrix fuer interpolierte
#  for(i in 0:nrow(inpol)){
#    h1 <- inpol[i,1]-height.diff/2 #untere Grenze
#    h2 <- inpol[i,1]+height.diff/2 #obere Grenze
#    h1h2rows <- which(data$alt < h2 & data$alt >= h1)
#    inpol[i,2] <- mean(data$temp[h1h2rows])
#    inpol[i,3] <- sd(data$temp[h1h2rows])
#  }
#  return(inpol)
#}
#raw.pol <- tempinpol(raw)
#!/net/opt/R/3.0.2/gcc472/7/x86_64/bin/Rscript
#ADS-B-Daten einlesen
#Alexander Buetow
#06.12.14
#Quellen: "Technical Provisions for Mode S Services and Extended Squitter" (ICAO, 2011)
#         http://www.lll.lu/~edward/edward/adsb/DecodingADSBposition.html (Stand: August 2014)
rm(list=ls())
setwd('~/adsb/R')
datestr <- format(Sys.time(), '%Y%m%d_%H', 'GMT')
file1 <- paste0('~/adsb/raw/',datestr,'.dat') #Inputfile
#-----Funktionen------
source('df17decode.R') #Dekodierungsalgorithmus fuer DF17-Bloecke
source('df2021decode.R') #Dekodierungsalgorithmus fuer DF20/21-Bloecke, BDS 4,0 und 5,0
source('icao_recon.R') #CRC-Routine zur Rekonstruktion der interogierten ICAO-Adressen in DF20/21-Meldungen
#Funktion zur Umwandlung der hex-Strings in Binary-Strings (sehr schnell)
hextobin <- function(hexdata){
k <- nrow(hexdata)
bindata <- rep(NA,k)
liste <- cbind(c("0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"),
c("0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"))
for (i in 1:28){ #ueber jeden einzelen hex-Character der 112bit-Messages
hex <- substr(as.character(hexdata[,2]),i,i)
for (j in 1:16){ #fuer alle hex-Werte
line <- which(hex == liste[j,1])
bindata[line] <- paste0(bindata[line],liste[j,2])
}
}
bindata <- substr(bindata,3,114)
return(bindata)
}
#---------------------
decl <- 3.3 #magnetische Deklination (Stand+Quelle: Oktober 2014, http://www.gfz-potsdam.de/deklinationsrechner/)
raw.dat <- read.table(file1, colClasses=c("numeric", "character"))
raw.dat[,2] <- substr(raw.dat[,2],2,29)
raw.bin <- hextobin(raw.dat) #wandle Hex- in Binary-Strings um
#Datenbloecke splitten
raw <- data.frame(cbind(raw.dat[,1], substr(raw.dat[,2], 1, 2), substr(raw.dat[,2], 3, 8),
substr(raw.dat[,2], 9, 22), substr(raw.dat[,2], 23, 28), raw.bin), NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
names(raw) <- c("time", "format", "address", "mess", "parity", "bin", "format2", "type", "alt", "alt.geo", "hdiff",
"vs", "flag", "lat.dec", "lon.dec", "lat", "lon", "hdg", "trk", "rola", "tas", "kias", "gs", "mach")
#entferne unnoetige Meldungen
raw <- raw[-c(which(raw$format %in% "80"),which(raw$mess %in% "00000000000000")),]
#+++Auswertung der DF17-Bloecke+++
selrows <- which(raw$format %in% c("8D","8F")) #selektiere DF17-Messages
raw[selrows,] <- df17decode(raw[selrows,])
#+++Auswertung der DF20/21-Bloecke+++
#dekodiere BDS-Register 5,0 und 6,0
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages
raw[selrows,] <- df2021decode(raw[selrows,])
#loesche nicht dekodierbare DF20/21-Bloecke: wenn keine exemplarische Variable aus den BDS-Registern dekodiert werden konnte
raw <- raw[which(xor(is.na(raw$rola),is.na(raw$kias)) | raw$format %in% c("8D","8F")),]
#rekonstruiere ICAO-Adressen der verbliebenen DF20/21-Messages (recht langsam!)
selrows <- which(raw$format %in% c("A0","A8")) #selektiere DF20/21-Messages erneut
raw$address <- strtoi(as.character(raw$address), base=16) #wandle hex-ICAO-Adresse in dezimal um
raw$address[selrows] <- icao_recon(raw$bin[selrows],raw$parity[selrows])
#Aufraeumen und Vorbereitung zur meteo. Auswertung: unnoetige Datenfelder loeschen, Formatfeld formatieren, hdg-Wert umd Deklination korrigieren
raw <- raw[,-which(names(raw) %in% c("mess","type","flag","lat.dec","lon.dec","parity","bin"))] #loesche nicht mehr benoetigte Felder
raw <- raw[-which(raw$format %in% c("8D","8F") & is.na(raw$lat) & is.na(raw$hdiff)),] #loesche DF17-Felder, die keine dekodierte Position beinhalten
raw$format <- raw$format2
raw <- raw[,-4]
raw$format[which(is.na(raw$format) & !is.na(raw$mach))] <- 6 #BDS 6,0
raw$format[which(is.na(raw$format))] <- 5 #BDS 5,0
raw$format[which(!is.na(raw$hdiff))] <- 179 #DF17, BDS 0,9
raw$format[which(raw$format == 17)] <- 175 #DF17, BDS 0,5
raw$time <- as.integer(as.character(raw$time))
#Deklinationskorrektur
raw$hdg <- raw$hdg+decl
raw$hdg[which(raw$hdg > 360)] <- raw$hdg[which(raw$hdg > 360)]-360
raw$hdg[which(raw$hdg < 0)] <- raw$hdg[which(raw$hdg < 0)]+360
#+++meteorologische Auswertung+++
source('meteocalc.R') #Berechnungsroutine fuer meteorologische Auswertung
raw <- meteocalc(raw)
round(raw)
round(raw, 2)
head(round(raw, 2))
head(round(raw, 1))
